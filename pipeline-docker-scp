node {
withEnv([]) {
    // some block
        
		env.username = 'Umesh Patil'
		env.email = 'patilume@gmail.com'
		env.dockerImageName = 'my-webapp'
		env.dockerImageVersion = '1.2.0'
    }
	
  stage('Git Checkout'){
        git url: 'https://github.com/patilume/maven-project.git',
          branch:'master'
  }
  stage('prepare'){
  //def dockerImageName = 'my-webapp'
	//	def dockerImageVersion = '1.2.0'
		
  sh 'echo \$(dockerImageName)'
  def ec = 'echo'
  //sh 'printenv'
  sh "${ec} ${env.username}"
  
  echo "${env.dockerImageName}:${env.dockerImageVersion}"
  
  }
  stage('MVN Package'){
    def mvnHome = tool name: 'maven', type: 'maven'
    sh "${mvnHome}/bin/mvn clean package"
   }
  stage('Build Docker Image'){
    //sh 'docker build /var/lib/jenkins/workspace/pipeline_docker_tomcat_scp/ -t patilume/my-tomcat-app:1.1.0'
	 sh "docker build /var/lib/jenkins/workspace/pipeline_docker_tomcat_scp/ -t ${env.dockerImageName}:${env.dockerImageVersion}"
	//sh "docker build /var/lib/jenkins/workspace/pipeline_docker_tomcat_scp/ -t my-tomcat-app:1.2.0"
	
	try {
	//def dockerFilterDangling = 'docker images -q --filter "dangling=true"'
	
	sh "docker rmi \$(docker images -q --filter 'dangling=true')"
	}
	catch(error) {
	}
   }
   stage('Copy Docker Image to Dev-Env'){
	   sshagent(['tomcat-deploy']) {
	   
			//sh 'scp -o StrictHostKeyChecking=no webapp/target/*.war ec2-user@172.31.46.70:/usr/share/tomcat/webapps/'
			sh "docker save -o my-app.tar ${env.dockerImageName}:${env.dockerImageVersion}"
			//////sh "docker save -o my-app.tar my-tomcat-app:1.2.0"
			
			//sh 'chown -R ec2-user my-app.tar'
			//sh 'chmod -R 777 my-app.tar'
			//sh 'ls'
			//sh 'chown -R ec2-user:ec2-user my-app.tar'
			//sh 'chmod -R 777 my-app.tar'
			sh 'scp -o StrictHostKeyChecking=no my-app.tar ec2-user@172.31.46.70:/home/ec2-user/'
	   }
   }

  /* stage('Upload Image to DockerHub'){
    withCredentials([string(credentialsId: 'my-docker-hub', variable: 'mydockerhub')]) {
		// some block
		sh "docker login -u patilume -p ${mydockerhub}"
		}

		sh 'docker push patilume/my-tomcat-app:1.0.0'
  } */
  
  stage('Remove Old Containers'){
    sshagent(['tomcat-deploy']) {
      try{
        def sshCmd = 'ssh -o StrictHostKeyChecking=no ec2-user@172.31.46.70'
        def dockerRM = 'docker rm -f my-app'
        sh "${sshCmd} ${dockerRM}"
      }catch(error){

      }
    }
  }
  stage('Deploy-Dev-Env'){
    sshagent(['tomcat-deploy']) {
      //input 'Deploy  to tomcat?'
      def sshCmd = 'ssh -o StrictHostKeyChecking=no ec2-user@172.31.46.70'
      //def dockerRun = 'docker run -d -p 8080:8080 --name my-app patilume/my-tomcat-app:1.0.0'
	  def dockerLoad = 'docker load -i /home/ec2-user/my-app.tar'
	  sh "${sshCmd} ${dockerLoad}"
	  
	  
	  ////def dockerRun = 'docker run -d -p 8080:8080 --name my-app my-tomcat-app:1.2.0'
	  def dockerRun = 'docker run -d -p 8080:8080 --name my-app ' //my-tomcat-app:1.1.0'
      sh "${sshCmd} ${dockerRun} ${env.dockerImageName}:${env.dockerImageVersion}"
	  /////sh "${sshCmd} ${dockerRun}"
    }
  }
  
}
