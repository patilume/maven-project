pipeline {
	//make sure docker is installed on jenkins machine and docker service is active
	agent { label 'docker-agent' }

	stages{
		stage('set enviornment'){
			steps{
				script {
					env.username = 'Umesh Patil'
					env.email = 'patilume@gmail.com'
					env.dockerImageName = 'my-webapp'
					env.dockerImageVersion = '1.2.0'
				}
			}
		}
		
		stage('Git Checkout'){
			steps{
				git url: 'https://github.com/patilume/maven-project.git',
				branch:'master'
			}
		}

		stage('MVN Package'){
			agent { 
				docker {
					//image 'maven:3-jdk-8' 
					image 'maven:3-alpine'
					label 'docker-agent'
					//args '-u root'
					args '-v $HOME/.m2:/jenkins/.m2'
				} 
			}
			//agent { docker { image 'maven:3-alpine' } }
			steps{
				//def mvnHome = tool name: 'maven', type: 'maven'
				//sh "${mvnHome}/bin/mvn clean package"
				sh 'mvn clean install'
				sh 'mvn --version'
				sh 'pwd'
				sh 'ls'
				sh "cd webapp/target && ls && mv webapp.war {$HOME}/"
				//sh 'mv webapp.war {$HOME}/
				//sh 'ls'
			}
		}

		stage('Build Docker Image'){
			steps{
				
				//def dockerTool = tool name: 'remotedocker', type: 'org.jenkinsci.plugins.docker.commons.tools.DockerTool'
				sh 'pwd'
				sh "$HOME"
				sh 'ls'
				sh 'cd webapp && ls'
				//sh "docker build /var/lib/jenkins/workspace/pipeline_docker_remote_host/ -t patilume/${env.dockerImageName}:${BUILD_NUMBER}"
				////sh "docker build /home/jenkins/workspace/pipeline_remote_docker/ -t patilume/${env.dockerImageName}:${BUILD_NUMBER}"
				sh "docker build jenkins/.m2/ -t patilume/${env.dockerImageName}:${BUILD_NUMBER}"
				
				sh "docker tag patilume/${env.dockerImageName}:${BUILD_NUMBER} patilume/${env.dockerImageName}:${BUILD_NUMBER}:latest"
				script{
					try {	
						sh "docker rmi \$(docker images -q --filter 'dangling=true')"
					}
					catch(error) {
					}
				}
			}
		}
   
	}
}
