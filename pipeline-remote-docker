pipeline {
agent { label 'docker-agent' }

	stages{
	stage('set enviornment'){
		steps{
			withEnv([]) {
				// some block
        
				env.username = 'Umesh Patil'
				env.email = 'patilume@gmail.com'
				env.dockerImageName = 'my-webapp'
				env.dockerImageVersion = '1.2.0'
			}
		}
	}
	
	
  stage('Git Checkout'){
	steps{
        git url: 'https://github.com/patilume/maven-project.git',
          branch:'master'
		}
  }
  stage('MVN Package'){
	steps{
		def mvnHome = tool name: 'maven', type: 'maven'
		sh "${mvnHome}/bin/mvn clean package"
	}
   }
   
  stage('Build Docker Image'){
	steps{
		//def dockerTool = tool name: 'remotedocker', type: 'org.jenkinsci.plugins.docker.commons.tools.DockerTool'
		
		//sh "docker build /var/lib/jenkins/workspace/pipeline_docker_remote_host/ -t patilume/${env.dockerImageName}:${BUILD_NUMBER}"
		sh "docker build  -t patilume/${env.dockerImageName}:${BUILD_NUMBER}"
		sh "docker tag patilume/${env.dockerImageName}:${BUILD_NUMBER} patilume/${env.dockerImageName}:${BUILD_NUMBER}:latest"
		try {
			sh "docker rmi \$(docker images -q --filter 'dangling=true')"
		}
		catch(error) {
		}
	}
   }
   
   stage('Upload Image to DockerHub'){
	steps{
	   // This step should not normally be used in your script. Consult the inline help for details.
		withDockerRegistry(credentialsId: 'docker-hub', url: 'https://cloud.docker.com/repository') {
			// some block
			sh "docker login -u patilume -p ${mydockerhub}"
		}

		/* withCredentials([string(credentialsId: 'my-docker-hub', variable: 'mydockerhub')]) {
			// some block
			sh "docker login -u patilume -p ${mydockerhub}"
			} */
			sh 'docker push patilume/${env.dockerImageName}:${BUILD_NUMBER}'
	}
	} 
  
  stage('Remove Old Containers'){
	steps{
		sshagent(['tomcat-deploy']) {
		  try{
			def sshCmd = 'ssh -o StrictHostKeyChecking=no ec2-user@172.31.35.129'
			def dockerRM = 'docker rm -f my-app'
			sh "${sshCmd} ${dockerRM}"
		  }catch(error){
		}
		}
	}
  }
  stage('Deploy-Dev-Env'){
  steps{
		sshagent(['tomcat-deploy']) {
		  def sshCmd = 'ssh -o StrictHostKeyChecking=no ec2-user@172.31.35.129'
		  def dockerRun = 'docker run -d -p 8080:8080 --name my-app patilume/'
		  sh "${sshCmd} ${dockerRun} ${env.dockerImageName}"
		}
	}
  }  
}
}
